// Code generated by MockGen. DO NOT EDIT.
// Source: verify_token.go
//
// Generated by this command:
//
//	mockgen -source=verify_token.go -destination=../tests/mock/usecase/mock_verify_token.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockVerifyTokenUseCase is a mock of VerifyTokenUseCase interface.
type MockVerifyTokenUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockVerifyTokenUseCaseMockRecorder
	isgomock struct{}
}

// MockVerifyTokenUseCaseMockRecorder is the mock recorder for MockVerifyTokenUseCase.
type MockVerifyTokenUseCaseMockRecorder struct {
	mock *MockVerifyTokenUseCase
}

// NewMockVerifyTokenUseCase creates a new mock instance.
func NewMockVerifyTokenUseCase(ctrl *gomock.Controller) *MockVerifyTokenUseCase {
	mock := &MockVerifyTokenUseCase{ctrl: ctrl}
	mock.recorder = &MockVerifyTokenUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVerifyTokenUseCase) EXPECT() *MockVerifyTokenUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockVerifyTokenUseCase) Execute(ctx context.Context, token string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockVerifyTokenUseCaseMockRecorder) Execute(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockVerifyTokenUseCase)(nil).Execute), ctx, token)
}
